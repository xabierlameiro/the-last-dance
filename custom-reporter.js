import fs from 'fs';
import glob from 'glob';

class CustomReporter {
    constructor(globalConfig, reporterOptions, reporterContext) {
        this._globalConfig = globalConfig;
        this._options = reporterOptions;
        this._context = reporterContext;
    }

    onRunComplete() {
        glob('public/**/*.?(html|css)', function (err, files) {
            console.log('AKI', files);
            files.map((path) => {
                fs.readFile(path, 'utf8', (err, data) => {
                    if (err) {
                        console.log('err', err);
                        return;
                    }
                    // TODO - refactor on isolated function
                    var months = [
                        'Enero',
                        'Febrero',
                        'Marzo',
                        'Abril',
                        'Mayo',
                        'Junio',
                        'Julio',
                        'Agosto',
                        'Septiembre',
                        'Octubre',
                        'Noviembre',
                        'Diciembre',
                    ];
                    const date = new Date();
                    const day = date.getDate();
                    const month = date.getMonth();
                    const year = date.getFullYear();
                    const formatedDate =
                        day + ' de ' + months[month] + ' de ' + year;

                    let replaced = data.replace(
                        /Code coverage generated by\n\s*<a href="https:\/\/istanbul\.js\.org\/" target="_blank" rel="noopener noreferrer">istanbul\<\/a>\n\s*(.*)\n\s*<\/div>/g,
                        `Cobertura de código generada automáticamente por Xabier Lameiro el ${formatedDate}`
                    );

                    if (path === 'public/coverage/index.html') {
                        replaced = replaced.replace(/src="/g, 'src="coverage/');
                        replaced = replaced.replace(
                            /href="/g,
                            'href="coverage/'
                        );
                    }

                    replaced = replaced.replace(
                        /<div class='pad1'>\n\s*<h1>(.*)All files/g,
                        "<div class='pad1'><h1><a href='/'>Volver</a></h1></h1><h1><a href='/coverage'>Todos los archivos</a>"
                    );

                    replaced = replaced.replace(
                        /(\(.*)sort-arrow-sprite.png\)/g,
                        '(/coverage/sort-arrow-sprite.png)'
                    );

                    replaced = replaced.replace(
                        /<title>(.*)<\/title>/,
                        '<title>Cobertura de código por Xabier Lameiro</title>'
                    );

                    replaced = replaced.replace(
                        /(.*)<link rel="shortcut icon" (.*)\s* href="(.*)" \/>/,
                        '<link rel="shortcut icon" type="image/x-icon" href="/favicon.svg">'
                    );

                    replaced = replaced.replace(
                        /\.pad1 { padding: 10px; }/,
                        '.pad1 { padding: 10px; width: 100%; overflow: scroll; }'
                    );

                    fs.writeFile(path, replaced, 'utf-8', function (err, a) {
                        if (err) {
                            console.log('err', err);
                            return;
                        }
                    });
                });
            });
        });
    }

    getLastError() {
        if (this._shouldFail) {
            return new Error('Custom error reported!');
        }
    }
}

export default CustomReporter;
