name: Dev workflow

on:
    push:
        branches:
            - dev

jobs:
    unit-tests-and-deploy:
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/dev'
        env:
            NEXT_PUBLIC_DOMAIN: ${{ secrets.NEXT_PUBLIC_DOMAIN }}
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

        # Cache dependencies and artifacts to speed up the workflow
        # Use a matrix to test across different configurations
        strategy:
            matrix:
                node-version: [18, 16, 14]
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Install dependencies
              run: |
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
                  echo "@xabierlameiro:registry=https://npm.pkg.github.com/" >> ~/.npmrc
                  yarn install
              # Cache dependencies to speed up future runs
              # Use a lockfile for consistent installs
              # Include the yarn cache and node_modules folder
              # Exclude any build artifacts or test results
              # Note: this caching strategy may need to be adjusted based on the project
              #       and the size of the dependencies/artifacts
              # See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
              # for more information on caching in GitHub Actions
              env:
                  cache-name: cache-dependencies-${{ hashFiles('yarn.lock') }}
              # Restore the cache if available
              # Note: this step should be added after any steps that modify the dependencies or artifacts
              #       that are being cached (e.g., yarn install, npm install, build steps, etc.)
              # See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#using-a-cache-action
              # for more information on using the cache in GitHub Actions
              uses: actions/cache@v2
              with:
                  path: |
                      ~/.cache/yarn
                      ./node_modules
                  key: ${{ env.cache-name }}
                  restore-keys: |
                      cache-dependencies-
                      cache-

            - name: Linter
              run: yarn run lint

            - name: Run unit tests
              run: yarn run test

            - name: Publish coverage report
              env:
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_COVERAGE_PROJECT_ID }}
              run: vercel deploy --token=${{ secrets.VERCEL_TOKEN }}

            - name: Publish storybook
              env:
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STORYBOOK_PROJECT_ID }}
              run: vercel deploy --token=${{ secrets.VERCEL_TOKEN }}

            - name: Install Vercel CLI
              run: npm install --global vercel@canary

            - name: Trigger Vercel Deployment
              env:
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: |
                  vercel deploy --token=${{ secrets.VERCEL_TOKEN }} >> deploy-url.txt
                  echo URL=$(cat deploy-url.txt) >> $GITHUB_ENV
                  echo NEXT_PUBLIC_DOMAIN=$(cat deploy-url.txt) >> $GITHUB_ENV

            - name: Install Playwright Browsers
              run: |
                  npx playwright install --with-deps chromium
            - name: Run end-to-end tests
              run: yarn test:e2e:report
              uses: actions/cache@v2
              with:
                  path: playwright-report
                  key: e2e-test-results-${{ matrix.node-version }}
                  restore-keys: e2e-test-results-

            - name: Publish e2e report
              if: always() # always publish the report even if the tests fail
              run: |
                  curl -X POST \
                  -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d '{"name": "the-last-dance-e2e", "files": [{ "file":"playwright-report/index.html","data": "$(cat playwright-report/index.html)"}], "projectSettings": {"framework": null, "buildCommand": "echo '\''no build step required'\''", "outputDirectory": "/"}}' \
                  "https://api.vercel.com/v13/deployments?teamId=${{ secrets.VERCEL_ORG_ID }}"
              # Note: the PLAYWRIGHT_REPORT environment variable is not needed anymore since we're using curl to send the report directly
